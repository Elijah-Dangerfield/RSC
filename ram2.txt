{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \cb2 \expnd0\expndtw0\kerning0
; Elijah Dangerfield\
\
  JMP start\
  \
  ; Variables\
\
  vara: 2B     ; 43 \
  varb: A9	 ; 169 \
  varc: AF     ; 175 \
  vard: D1     ; 209 \
  sum: 0       ; Stores sum of vara and varb\
  dif: 0       ; Stores difference of vara and varb\
  band: 0      ; Stores 'and' result of vara and varb\
  bor: 0       ; Stores 'or' result of vara and varb\
  shft: 0      ; Stores arithmetic right shift of varb\
\
  start:       ; the label 'start'. The jump statement earlier jumps here\
\
; Adding vara and varb\
     LDAC vara ; Load the first variable into Acc\
     MOVAC     ; Move the contents of Acc to R\
     LDAC varb ; Load the second variable into Acc\
     ADD       ; Add Acc and R, move result into Acc\
	  STAC sum  ; Store ACC to sum address\
	  LDAC sum  ; Load ACC from sum address\
     OUT       ; Send Acc contents to Output Register\
     CLAC      ; Clear ACC\
\
; Subtracting vara from varb\
     LDAC vara ; Load vara into Acc\
     MOVAC     ; Move the contents of Acc to R\
     LDAC varb ; Load the second variable into Acc\
     SUB       ; Subtract Acc and R, move result into Acc\
	  STAC dif  ; Store ACC to dif address\
	  LDAC dif  ; Load ACC from dif address\
     OUT       ; Send ACC contents to output\
     CLAC      ; Clear ACC\
\
; AND vara and varb\
     LDAC vara ; Load var1 into Acc\
     MOVAC     ; Move the contents of Acc to R\
     LDAC varb ; Load the second variable into Acc\
     AND       ; AND Acc and R, move result into Acc\
	  STAC band ; Store ACC to band address\
	  LDAC band ; Load ACC from band address\
     OUT       ; Send ACC contents to output\
     CLAC      ; Clear ACC\
\
; OR vara and varb\
     LDAC vara ; Load vara into Acc\
     MOVAC     ; Move the contents of Acc to R\
     LDAC varb ; Load the second variable into Acc\
     OR        ; OR Accumulator and R, move result into Acc\
	  STAC bor  ; Store ACC to bor address\
	  LDAC bor  ; Load ACC from bor address\
     OUT       ; Send ACC contents to output\
     CLAC      ; Clear ACC\
\
; ASHR varb\
     LDAC varb ; Load varb into Acc\
     ASHR      ; Arithmetic shift right the ACC\
     STAC shft ; Store ACC to shr address\
     LDAC shft ; Load ACC from shr address\
     OUT       ; Send ACC contents to output\
     CLAC      ; Clear ACC\
\
; Increment varc\
     LDAC varc ; Load varc into Acc\
     INC       ; Increment ACC\
     STAC varc ; Store ACC to varc address\
     LDAC varc ; Load ACC from varc address\
     OUT       ; Send ACC contents to output\
     CLAC      ; Clear ACC\
\
; NOT vard\
     LDAC vard ; Load vard into Acc\
	  MVAC      ; Move ACC to R\
     MOVR      ; Move R to ACC\
     NOT       ; NOT the ACC\
     STAC vard ; Store ACC to vard address\
     LDAC vard ; Load ACC from vard address\
     OUT       ; Send ACC contents to output\
     CLAC      ; Clear ACC\
     \
     HALT     ; Stop execution}